version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.15.2
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2
  
  build-application:
    parallelism: 1
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=1"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    working_directory: /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-{{ .Environment.CACHE_KEY }}-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-{{ .Environment.CACHE_KEY }}-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests iRcn parallel
          command: |
            mkdir workspace
            echo 'Test' > workspace/step
            chmod 777 ./gradlew
            ./gradlew test
            #cp -R build/reports src/main/resources
      - persist_to_workspace:
          root: workspace
          paths:
            - step
      - run:
          name: Set Build number in workspace
          command: |
            echo $CIRCLE_BUILD_NUM > workspace/buildnum
      - persist_to_workspace:
          root: workspace
          paths:
            - buildnum
      - store_artifacts:
          path: build/reports
          when: on_success
      - save_cache:
          paths:
            - ~/.gradle/{{ .Environment.CACHE_KEY }}/wrapper
          key: v1-gradle-{{ .Environment.CACHE_KEY }}-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/{{ .Environment.CACHE_KEY }}/caches
          key: v1-gradle-{{ .Environment.CACHE_KEY }}-cache-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
          when: on_success
      - run:
          name: Gradlew Assemble
          command: |
            echo 'Build' > workspace/step
            ./gradlew assemble
      - persist_to_workspace:
          root: workspace
          paths:
            - step
      - store_artifacts:
          path: build/libs
          destination: artifact-file
      - attach_workspace:
          at: /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}/workspace
      - run:
          name: Send Failed Result To Teams
          command: |
            if [ $CIRCLE_NODE_INDEX == 0 ]; then
            export STEP=$(cat /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}/workspace/step)
            export BUILD_NUM=$(cat /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}/workspace/buildnum)
            ./.circleci/notifyTeams.sh $STEP $CIRCLE_BUILD_NUM Failed
            fi
          when: on_fail
  deploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      show-kubectl-command:
        description: |
          Whether to show the kubectl command used.
        type: boolean
        default: false
      resource-name:
        type: string
      namespace:
        type: string
        default: backend
    steps:
      - checkout
      - run:
          name: Test param
          command: |
            echo << parameters.docker-image-name >>
            echo "<< parameters.docker-image-name >>"
      - run:
          name: Create deployment manifest
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat deployment/deployment.yaml |\
               sed "s|DOCKER_IMAGE_NAME|<< parameters.docker-image-name >>|g" > deployment/deployment_replace.yaml && \
               mv deployment/deployment_replace.yaml deployment/deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/deployment.yaml"
          get-rollout-status: true
          namespace: backend
          resource-name: << parameters.resource-name >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/deployment.yaml"

      - run:
          command: |
            RESOURCE_NAME="<< parameters.resource-name >>"
            NAMESPACE="<< parameters.namespace >>"
            if [ -n "${RESOURCE_NAME}" ]; then
              set -- "$@" "--resource-name=${RESOURCE_NAME}"
            fi
            if [ -n "${NAMESPACE}" ]; then
              set -- "$@" "--namespace=${NAMESPACE}"
            fi
            kubectl rollout undo "$@"
          name: Rollback the resource
          when: on_fail

      - attach_workspace:
          at: /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}/workspace
      - run:
          name: Send Failed Result To Teams
          command: |
            export BUILD_NUM=$(cat /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}/workspace/buildnum)
            ./.circleci/notifyTeams.sh DeployFailed $BUILD_NUM Failed
          when: on_fail
      - run:
          name: Send Success Result To Teams
          when: on_success
          command: |
            export BUILD_NUM=$(cat /tmp/github.com/{{ORG_NAME}}/{{REPO_NAME}}/workspace/buildnum)
            ./.circleci/notifyTeams.sh DeploySuccess $BUILD_NUM Success

workflows:
  deployment:
    jobs:
      - build-application:
          context: DEPLOYER
          name: build-application
          # TODO：他のブランチで作業のため一旦コメントします
          filters:  # ブランチ全体にマッチさせる正規表現フィルターを使う
            branches:
              only:  # 下記の正規表現フィルターにマッチするブランチのみが実行される
                - /master/
      - aws-ecr/build-and-push-image:
          name: aws-ecr/build-and-push-image
          context: DEVELOP
          filters:  # ブランチ全体にマッチさせる正規表現フィルターを使う
            branches:
              only:  # 下記の正規表現フィルターにマッチするブランチのみが実行される
                - /master/
          account-url: AWS_ECR_ACCOUNT_URL
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          region: AWS_DEFAULT_REGION
          tag: "${CIRCLE_SHA1}"
          requires:
            - build-application
      - deploy-application:
          name: deploy-application
          filters:  # ブランチ全体にマッチさせる正規表現フィルターを使う
            branches:
              only:  # 下記の正規表現フィルターにマッチするブランチのみが実行される
                - /master/
          cluster-name: "${CLUSTER_NAME}"
          aws-region: ${AWS_DEFAULT_REGION}
          docker-image-name: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          resource-name: "${RESOURCE_NAME}"
          requires:
            - aws-ecr/build-and-push-image

      # - aws-ecr/build-and-push-image:
      #     name: aws-ecr/tmn-build-and-push-image
      #     # filters:  # ブランチ全体にマッチさせる正規表現フィルターを使う
      #     #   branches:
      #     #     only:  # 下記の正規表現フィルターにマッチするブランチのみが実行される
      #     #       - /TMN-master/
      #     account-url: AWS_ECR_ACCOUNT_URL
      #     repo: "${TMN_AWS_RESOURCE_NAME_PREFIX}"
      #     region: AWS_DEFAULT_REGION
      #     tag: "${CIRCLE_SHA1}"
      #     requires:
      #       - deploy-application
      # - deploy-application:
      #     name: tmn-deploy-application
      #     # filters:  # ブランチ全体にマッチさせる正規表現フィルターを使う
      #     #   branches:
      #     #     only:  # 下記の正規表現フィルターにマッチするブランチのみが実行される
      #     #       - /TMN-master/
      #     cluster-name: "${TMN_CLUSTER_NAME}"
      #     aws-region: ${AWS_DEFAULT_REGION}
      #     docker-image-name: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${TMN_AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"
      #     version-info: "${CIRCLE_SHA1}"
      #     requires:
      #       - aws-ecr/tmn-build-and-push-image
